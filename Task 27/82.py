file = open('files/82/27-82a.txt')  # Открываем файл с числами.
n = int(file.readline())  # В первой строке файла записано количество чисел, которые будут даны в файле.

# Создадим список primes_indexes, в котором мы будем хранить индексы (порядковые номера) простых чисел. Нумерация
# будет вестись с нуля.
primes_indexes = []

# Создадим список prefix_sum, заполненный нулями, для хранения сумм последовательностей. Каждый i-элемент этого
# списка является суммой чисел из исходного файла от 1 до i включительно, полученный сложением prefix_sum[i - 1] и
# i-го числа. Размер этого списка равен количеству чисел в файле, то есть n. Заранее заполним его нулями.
prefix_sum = [0] * n

# Заполняем список prefix_sum в соответствии с вышеописанным алгоритмом.
for i in range(n):
    x = int(file.readline())  # Получаем i-е число из файла.
    prefix_sum[i] = prefix_sum[i - 1] + x  # Находим сумму чисел от 0-го до i-го.

    # Проверка: является ли x простым числом. Если x - простое число, то мы добавляем значение переменной i в список
    # primes_indexes.
    flag = True
    for j in range(2, int(x ** 0.5) + 1):
        if x % j == 0:
            flag = False
            break
    if flag:
        primes_indexes.append(i)

# Выводим промежуточные результаты.
print(prefix_sum)
print(primes_indexes)

# По условию задачи нам нужно найти максимальную сумму подпоследовательности натуральных чисел, включающей краткое k
# (k == 9) количество простых чисел. Чем больше нам удастся включить в эту последовательность простых чисел, тем больше
# будет сумма этой подпоследовательности. Найдём, какое максимальное количество, кратное k, простых чисел мы можем
# включить в подпоследовательности. Для файла 27-82a.txt - это число 18, для файла 27-82b.txt - 27.
d = len(primes_indexes) // 9 * 9
print(d)

# Теперь нам нужно рассмотреть подпоследовательности, содержащие d простых чисел. Рассматривать мы будем
# последовательности от i до i + d + 1. Берём из списка primes_indexes число, стоящее на i-ой позиции, и число, стоящее
# на i+d+1-ой позиции. Между ними находится ровно d индексов простых чисел. Сумма этой последовательности будет равна
# разнице между prefix_sum[primes_indexes[i]] и prefix_sum[primes_indexes[i+d+1] - 1] (добавили минус 1, так как это
# простое нас не интересует). Однако у нас есть два случая, которые не укладываются в данную логику: случай с первыми
# d простыми числами, и случай с последними d простыми числами.


# Случай 1. Найдём сумму подпоследовательности, которая включает в себя первые d простых чисел. Для этого нам нужно
# узнать на каким по счёту в файле было d+1-ое простое число. Однако учитывая, что индексация элементов списка
# начинается с 0, то мы можем сразу узнать этот номер простого числа просто взяв из списка primes_indexes число на
# позиции d.
index = primes_indexes[d]
print(index)  # Выведем этот индекс, чтобы проверить свои расчёты вручную.
# Зная индекс вхождения d+1-го простого числа, мы можем узнать какая сумма подпоследовательности накопилась перед ним.
m_0 = prefix_sum[index - 1]
print(m_0)  # Выводим эту сумму.

# Случай 2. Найдём сумму подпоследовательности, которая включает в себя последние d простых чисел. Для этого нужно
# узнать d+1-ое простое число от конца последовательности. Мы можем вычислить его по формуле ниже.
index = primes_indexes[len(primes_indexes) - d - 1]
print(index)  # Выводим, на какой позиции стоит это d+1-ое простое число от конца последовательности.
# Сумму этой подпоследовательности мы можем найти как разницу между суммой всей последовательности и суммой накопленной
# к этому простому числу, включая его.
m_1 = prefix_sum[-1] - prefix_sum[index]
print(m_1)

# Найдём максимальное значение из двух найденных сумм.
m_m = max(m_0, m_1)

# Остальные случаи. Их легко посчитать по формуле len(primes_indexes) - d - 1.
for i in range(1, len(primes_indexes) - d):
    # Узнаём индекс простого числа, от которого (не включая его) будем собирать подпоследовательность.
    start_index = primes_indexes[i - 1]
    print(start_index)
    # Узнаём индекс простого числа, до которого мы собираем подпоследовательность.
    finish_index = primes_indexes[i + d]
    print(finish_index)
    # Находим разницу между суммами. Нам нужно вычесть 1, так как само простое число не должно попасть в
    # подпоследовательность, так как оно уже является d+1-м простым числом.
    t = prefix_sum[finish_index - 1] - prefix_sum[start_index]
    print(t)  # Выводим сумму подпоследовательности.
    if t > m_m:
        m_m = t

print('result:', m_m)
